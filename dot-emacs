(add-to-list 'load-path "~/.emacs.d/")

(if (functionp 'tool-bar-mode) (tool-bar-mode 0))
(if (functionp 'scroll-bar-mode) (scroll-bar-mode 0))

(global-font-lock-mode 1)
(setq make-backup-files nil)
(setq default-tab-width 4)
(setq c-basic-offset 4)
(setq css-indent-offset 2)
(setq sh-basic-offset 2)
(setq line-number-mode t)
(setq column-number-mode t)
(setq visible-bell t)
(setq delete-by-moving-to-trash t)
(setq ns-command-modifier (quote meta))
(setq transient-mark-mode t)
(show-paren-mode t)
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(set-default 'javascript-indent-level 2)

(set-default-font "Monaco-14")
(set-fontset-font "fontset-default" 'gb18030' ("STHeiti" . "unicode-bmp"))

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(global-set-key (kbd "C-2") 'set-mark-command)
(global-set-key (kbd "M-g") 'goto-line)
(global-set-key (kbd "M-t") 'complete-tag)

(require 'sr-speedbar)
(setq speedbar-frame-parameters
  '((minibuffer)
    (width . 40)
    (border-width . 0)
    (menu-bar-lines . 0)
    (tool-bar-lines . 0)
    (unsplittable . t)
    (left-fringe . 0)))
(setq speedbar-hide-button-brackets-flag t)
(setq speedbar-show-unknown-files t)
(setq speedbar-smart-directory-expand-flag t)
(setq speedbar-use-images nil)
(setq sr-speedbar-auto-refresh nil)
(setq sr-speedbar-max-width 70)
(setq sr-speedbar-right-side nil)
(setq sr-speedbar-width-console 40)

(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

(require 'coffee-mode)
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

;(add-to-list 'load-path "~/.emacs.d/ruby-mode/")
;(add-to-list 'auto-mode-alist '("\\.rb\\'" . ruby-mode))
;(autoload 'ruby-mode "ruby-mode" "Major mode for editing Ruby code" t)
;(add-hook 'ruby-mode-hook (lambda () (local-set-key "\r" 'newline-and-indent)))

(add-to-list 'load-path "~/.emacs.d/solarized")
(require 'color-theme-solarized)
(color-theme-solarized-light)
(setq solarized-termcolor 256)
(setq solarized-degrade t)
(setq solarized-bold nil)
(setq solarized-underline nil)
(setq solarized-italic nil)
(setq solarized-broken-srgb t)

(setq tramp-chunksize 500)
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))

(require 'slim-mode)
(add-to-list 'auto-mode-alist '("\\.plim$" . slim-mode))

;(require 'fill-column-indicator)
;(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
;(global-fci-mode 1)
;(setq-default fci-rule-column 80)
;(setq fci-rule-width 3)
;(setq fci-rule-color "cyan")

(require 'highlight-indentation)
(add-hook 'python-mode-hook 'highlight-indentation-mode)
(add-hook 'js2-mode-hook 'highlight-indentation-mode)
(add-hook 'slim-mode-hook 'highlight-indentation-mode)
(put 'downcase-region 'disabled nil)

(require 'smex)
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

(global-set-key (kbd "C-c o") 'occur)

(add-to-list 'load-path "~/.emacs.d/cc-mode")
(require 'cc-mode)

(setq auto-mode-alist
  (append
    '(("\\.C$"    . c++-mode)
      ("\\.H$"    . c++-mode)
      ("\\.cc$"   . c++-mode)
      ("\\.hh$"   . c++-mode)
      ("\\.c$"    . c-mode)
      ("\\.h$"    . objc-mode)
      ("\\.m$"    . objc-mode)
      ("\\.java$" . java-mode)
     ) auto-mode-alist))

(add-to-list 'auto-mode-alist '("\\.mm\\'" . objc-mode))
(add-to-list 'auto-mode-alist '("\\.m\\'" . objc-mode))
(add-to-list 'auto-mode-alist '("\\.h\\'" . objc-mode))

(add-to-list 'load-path "~/.emacs.d/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)

(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
(setq-default ac-sources '(ac-source-yasnippet ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
(setq ac-source-yasnippet nil)
(add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
(add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
(add-hook 'ruby-mode-hook 'ac-ruby-mode-setup)
(add-hook 'css-mode-hook 'ac-css-mode-setup)
(add-hook 'auto-complete-mode-hook 'ac-common-setup)
(global-auto-complete-mode t)
(add-to-list 'ac-modes 'objc-mode)
